# Chapter Five: Assignments & Projects
Once you teach the material, you need to have your students apply it. Programming is such a hands-on field that it's impossible to truly learn without getting your hands dirty in some code. Solving problems, creating answers, and expressing your ideas through code are skills that take time and practice to develop. There are three main schools that your assignments and projects can fall into, with each serving a unique and specific purpose. A sample assignment can be found in appendix B.

## Project-based Learning
As mentioned above, programming is truly a hands-on field. There is a philosophical thought experiment called the "knowledge argument"[^fn14]. Paraphrased, it goes something like this:

[^fn14]: [https://en.wikipedia.org/wiki/Knowledge_argument](https://en.wikipedia.org/wiki/Knowledge_argument)

> Mary is a scientist who studies color. However, she has never seen anything in color. She lives and works in a black and white room with black and white TVs. She can tell you everything there is to know about color, such as specific wavelengths, how the eyes and brain process color, and the psychological effects of seeing certain colors. If Mary were to leave her room, go outside, and see color for the first time, would she learn anything new?

Now, it's up to the philosophers to discuss the deep and hidden meanings of this experiment, but I think that there is a clear answer if we relate this to programming. You can read and study all you want, but there are somethings you will never truly understand until you just write some code.
With this in mind, I try to keep my classes as rooted as possible in project-based learning. There is definitely book learning occurring, with me standing at the board talking and sharing information. However, I try to have my students writing code in every class. They write programs to try to concepts I just taught. They write code for fun in a form of unstructured play. I give them challenges that they must discover the answers to by trying things out. I personally use a constructivist approach to teaching, if you are interested in education psychology[^fn15].

[^fn15]: [https://en.wikipedia.org/wiki/Constructivist_teaching_methods](https://en.wikipedia.org/wiki/Constructivist_teaching_methods)

Having students learn through projects and hands-on work allows for deeper learning. They are able to discover questions, and sometimes answers, that you haven't thought of. They can also create their own knowledge base that you guide and shape. This process even allows them to fill their own toolbox with tips and tricks, just like I have encouraged you to do. Just as a gardener must get in the dirt to do his job, a programmer must get in code.

## Schools of Thought
Let's take a look at the different schools of thought for assignments and projects in coding. I do use all three, and this can vary greatly depending on the class. There have even been times where I was teaching two sections of the same class, and each section got a different type of assignment for the same material based on how that class was learning. Each school addresses a different need of the students, and all three are needed to have true learning.

### Academic
The first type of assignment you will see are academic ones. These type of assignments are not the most fun or useful assignments, but they serve as a deep illustration of the concepts you are teaching. One example is teaching conditions. I have my students write a program that uses trivial examples to illustrate the different types of conditions and how they relate. For example, I use an even/odd situation to show if/else statements and a divisible by three for if/elif/else. These examples are not the most useful or exciting, but they serve to illustrate how each condition works.

### Practical
The second type is a program that has some practical use. These are programs that students can actually use in their everyday life. They may or may not be fun to write, but they are at least useful. I have my students make a calculator when learning about operators and data types. They take a string of input, use functions/APIs to change from a string to a number, evaluate simple expressions, and show the result. This is not the most glorious and thrilling program, but it shows the students how you can make useful things with programming.

### Fun
The final type is a fun program. These are the programs that the students enjoy writing. They may not be practical or useful, but they sure are fun. Some programs I have my students write that would belong here are MadLibs, a secret code generator, and bouncing smiley faces. Yes, I do use this code to explain and demonstrate certain programming concepts, but the selling point of these programs is that it gets students excited about programming and the work they are doing. I also will often allow the students to modify any of the examples we do in class to have a little fun.

All schools of thought are needed. You must use all three to have good learning. Sometimes you simply need to have a more academic program to guide your students in understanding a concept. Your students may ask how what they are working on is useful for the real world (the constant toil of a math teacher as well), so you can give some practical programs to show that coding is a useful skill for the real world. The students are also middle schoolers, and sometimes they just need to let loose and have a little fun. If the students are bored, they are probably not going to connect with the material. The exact ratios are dependant on who you are as a teacher and what your students need, so take the time to get to know your students, gain feedback from student performance, and adjust accordingly.