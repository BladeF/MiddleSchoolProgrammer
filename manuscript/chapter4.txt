# Chapter Four: Teaching the Class
This leg of the journey is probably what you have been expecting this entire book to be about. Thanks for holding out this far and not giving up once you saw this content didn’t show up until chapter four. Now we will take a good hard look at the mechanics of actually teaching the course content. Topics include explanations, demonstrations, and how to help students. A sample lesson can be found in the appendix.

## Explanations
The way that you share the material with your students is the core of teaching. This is the skill that can make or break you, so it is imperative that you put much time into developing and growing this skill set. Here are some thinking points and tips to get you started in building your skill set.

### Multiple Viewpoints
No two people learn exactly the same way. It is highly unlikely that you will have a student, especially at the middle school level, who is able to process this information exactly like you do. The first thing that you must learn is to move beyond your own way of thinking. You simply can’t share your process of understanding and leave it at that. You must learn to look at things from many different points of view.
Let’s look at an example, and we will use it throughout this chapter: the variable. How many different ways can you think of to describe a variable? One? Two? Five? Try to write all of these down. I have a running document I keep of programming descriptions and explanations. Personally, I keep it in a digital format that I can access on my phone because my best ideas seem to come in that half-conscious state right before you fall asleep. I have used boxes, envelopes, and mailboxes most often to describe variables. Sometimes I have to come up with more analogies off the top of my head if none of the previous options click for students. There is no hard and fast number; you simply need as many as it takes to get the concept across to your students.
Teachers, including myself on several occasions, tend to fall back onto their own way of thinking when backed into a corner. You have come to develop your own mental models over the years, and they are familiar and comfortable. They are always there when you need them. You must resist the temptation to rely on them. You are absolutely allowed to share them, but they cannot be your only tool. You can’t build a car with only one size of wrench or landscape with only a trowel. The particular danger your models have when working with middle schoolers is that the models can simply be too advanced for them. There are few things worse for a teacher than watching your students struggle and fail to comprehend something no matter how hard they try. Make sure you adapt the material to their level.

### Illustrations
Using illustrations is a powerful tool for bringing information to the students in a way that they can comprehend. Programming can be such a heady topic, so making it real and physical is important at this stage in a child’s development. There are two major types of illustrations we will look at: verbal and physical. You can sometimes talk through an idea or concept, and sometimes you must go a step farther and make it a little more corporeal.

#### Verbal
Being able to quickly think of your feet is a powerful skill for the teacher. I often rely upon this skill when making verbal illustrations. We briefly touched on this in the previous section when describing the variable, but now we’ll look at the mechanics of doing this. The general pattern I have found is initial thought, explanation, refactor.
You always want to start by giving the initial idea or concept that I am trying to explain. I usually write it on the board so the students have something to reference. In this case, I would write “Variables”. More often than not I will also have a code example displayed. This can also be written on the board or displayed from a computer and projector, whichever is available and most useful. Never launch into the explanation without clearly stating the topic.
Next,  go through your explanation. Talk the students through how variables have a name and can store little pieces of information. We can then call on them by name later on and use whatever information they’re holding. We can also ask them to hold new information, but variables are clumsy and can only hold one thing at a time, so they must let go of the old information to take on the new. This basic verbal description covers just about all the main properties of variables besides type. Depending on the language you are using (I mostly teach in Python at this level, where variables don’t have an explicit type), this may not even be relevant.
Finally, interact with your students. Ask them if they understand. Walk through a few examples. Try and see if they truly understand the material and can apply it. If they don’t understand or cannot apply it, then it is time to refactor. You must go back and alter your explanation. You may try relating it to one of the concepts I mentioned above or coming up with your own. Ultimately, you need to change how you are explaining things until it clicks for your students. At the start of your semester/year, this will be a challenge. However, once time goes on you will start to get a better understanding of your students and how they think. It will become easier to relate information to them. Keeping notes in your journal of what works and what doesn’t can help you find patterns and expedite this process.

#### Physical
Sometimes, however, simply talking through something isn’t enough. You must make a physical representation of the idea. If you are a new teacher, take a look at Piaget’s stages of development. You students will be in the midst or just leaving the stage where they need concrete examples. They are not yet able to deal with purely mental or abstract concepts yet. You need to try and take a rather immaterial subject matter and give it form.
Let’s take another look at the variable sample. You have just walked through the verbal illustration above, but some of the students are still not quite getting it. Now is the perfect time to reveal a physical analogy. Take out a small Tupperware container, the size used for salad dressing is perfect, and put a sticky note on top. Tell the student that this box is your variable, and the box needs a label so it doesn’t get lost. Show the students that you can store things in the box by taking a scrap of paper, writing a value on it, and putting that scrap in the box. Write a statement on the board that uses the variable, showing the students that, whenever you want to use the information in your variable, you simply use the name of the variable, open the box, and replace the variable name with whatever bit of information was stored in the box. You can also show the students that the box is rather small (hence the salad dressing size), so it can only hold one scrap of paper at a time. You must remove the old scrap if you want to put new information in the box.

Illustrations are an essential skill for the teacher, and it takes time to master it and build a reasonable set of analogies. You can search for some, but you will ultimately end up making some of your own. You will find that building these analogies is a skill that gets easier every time you use it. You will begin to develop an interpretive mindset and the ability to look at things beyond your own viewpoint. If the box example above doesn’t click for your students, make another. Use envelopes, or a mailbox, or a filing drawer, or many other things that I, and you, haven’t thought of yet.

## Demonstrations
You not only need to explain code, but you must also demonstrate it. Students need example code to work from. At the middle school level, it takes a good long while of studying someone else’s code before they are able to generate their own. You must provide these examples and help them learn how to take the head knowledge and apply it to a computer.  There are two main ways I do this: writing code on the board and code-alongs.

### On the Board
I use this most often when writing code snippets. Sometimes I don’t want my students to look at an entire program, rather, I would like for them to focus on only a line or two. Using the board is a great resource for this. You are removing any distracting context, but you are also able to annotate. You can underline, box off, rewrite, and make other such alterations to the code. This allows you to provide a different type of context than what seeing the code in a program provides. Use this first and foremost.

### Code-along
This is the part where you have the students working at a computer. Sometimes you may have students using their own computers, and others you may have desktops in your classroom. This is entirely dependent on your school. No matter what your situation is, make sure you harken back to the previous chapter. This is a time that is ripe for extraneous activities. Keep a close eye on your students during code-alongs and make sure that they are truly working.
Now, the basic idea of a code-along is very simple and reflected in the name. You are writing code, showing your screen on a projector, and having the students writing along with you. It is best if you explain as you go along, but know that this is usually the final step in the process. You should have already explained and illustrated the concept(s) that you are coding before they are writing the actual code. Once the students have copied everything down, allow them to run the code.

## Helping Students
Invariably, some students will need help. The transcription process is rarely perfect on the first try. There are two major ways to help students: in class or one-on-one. The first situation is usually a quick fix. The second is if a problem is going to take more than thirty seconds to solve, as a general rule. Feel free to adapt that timing to fit your teaching style and your students.

### In Class
You have better eyes than your students. You have more experience with code than they do, so that means you have probably come across this particular student’s problem before. He may have misspelled a variable name, or she forgot a colon in her if-statement. After finishing a code-along, I always have my students run their code to check for these situations. As they are running their code, walk around your classroom and check in with the students. Some will raise their hand and ask for help, while others are more quiet with their problems. See if you can fix the problems within thirty seconds. If not, explain what you can, move on, and come back to the student if time allows.

### One-on-one
Sometimes you need more time than you can spare in class to help a student. In these situations, set up a time for the student to come and see you. For this, this was before school, after school, during lunch, or during study hall, if the school had it. Sometimes I would have one student show up, and other times I would have several. Spreading the meetings across multiple sessions per day helps with this, so encourage the kids towards a specific time as much as possible to allow for a higher quality session.
Once you have set up a time and the student shows up, the process is very similar to what you have been doing in class. The major difference is starting with asking her what she is struggling with. Sometimes you know beforehand, especially if you ask her to come and see you, but other times not so much. Next, go through the same process as a class. Explain the material, provide illustrations, demonstrate, and ask again. This can be a very cyclical process, and each iteration doesn’t necessarily need to be complete. Take the lead from the student. In these situations, it is much better to be a shepherd rather than a chariot driver. Guide the student to the answer, help her come to her own conclusions and become more self-sufficient, rather than taking the reins and leading her to the answer. With option one, the student learns. Option two, the student gets the answer. Two very different end results.

## Walkthrough
Let’s go through the entire process. We have been talking about variables throughout the chapter, so let’s choose a different topic. Let’s take a look at how to teach events. If I am teaching Python, I use Turtle in my classes. The Turtle module has some event-driven functionality that I teach my students to use to make a digital coloring book. This is the sequence and process I go through.
First, I recall what the students know about functions (see chapter three). They are name pieces of code that we can use to simplify our programs, and we make functions when we see ourselves writing the same thing over and over again. Once we have recalled and reviewed functions, I explain that Turtle has a special set of functions. These functions only run under special circumstances, and we are allowed to chose those circumstances. These are called events, and this styling of writing code is event-driven programming because our code will only run when those events happen.
Next, I provide an illustration. Since I am also an orchestra teacher, I bring my viola to class. I will get it out and, after the students have oohed and aahed, I ask them if my viola is making sound. They say no. I ask if it ever makes sound, and this time they say yes. I explain that the viola will only make sound when a certain event happens: I move my bow across the strings. I will then play a few notes. I tell the students while I am playing that, because I am bowing, the viola is now making sound. As soon as I stop the event, and I stop playing at this moment, the sound stops.
I then write the event functions and listener function on the board. I explain that the event functions are used to tie together which function we want to happen for those events and that the computer needs to be listening for these events, otherwise it won’t know to run the code when that event happens.
Finally, I do a code-along and have the students write of a simple program that draws a circle on the screen whenever the student his a certain key or clicks on the screen. I walk around and make sure all the programs are running. One student doesn’t know what’s wrong, so I show him that he misspelled “onkeypress”. Another calls me over to check that she truly understands what the error message means and, when confirmed, fixes it herself. One student seems to be struggling. I go over to him, and he just doesn’t get events. I try to give a quick recap, but it doesn’t click. I ask him if he would like to come and see me at the end of the day. He agrees, and we part ways for now.
He shows up at my door. I know that he plays baseball, so I have a balled-up piece of paper and, as he walks in, I shout “Catch!” and throw the paper at him. He looks up and catches the paper, rather surprised. I tell him to remember this moment for a little bit later. I ask him what he is struggling with understanding, and he explains that he doesn’t quite get the events and listening. I had an idea that this was the issue.
I tell him to imagine that we are building a robot baseball player. The robot is going to be in the outfield, so he needs to know how to catch. I tell the student that we write a function called catch, but we need to know when to catch it. We don’t want the robot to just be standing there waving its arm. It needs to be able to only catch when a ball is coming towards it. So we make a type of event called “onballapproach”. Using the same syntax as Turtle, I write the code snippet on the board to connect this event with our catch function. He is with me so far and is able to answer a few questions about the material so far.
I now ask him how he knew to catch the paper when he walked in my door. He says it’s because I yelled: “Catch!”. I explain that he was listening, so he heard my indicator that something was happening. I tell him the computer works the same way. Just like he needed to hear me say “Catch!” to focus on the ball, the computer needs to be listening for events to happen. Since I found a way to relate the concept to something that he is interested in, this analogy makes much more sense to him and he really understands the material now.

When teaching programming to middle school students, there is a definite process. The process may need tweaking every once in a while, but the overall idea stays the same. Explain the material, illustrate the concepts, write some code, and solve any problems that arise. Nearly every lesson I teach follows this format.  Make sure that you fill your toolbox with many explanations and illustrations, as teaching is never a one-size-fits-all situation. Learn to look beyond yourself, your viewpoints, and how you learn. Guide your students, have them learn, and create self-sufficient individuals.